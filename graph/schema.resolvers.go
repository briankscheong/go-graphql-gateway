package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"crypto/rand"
	"fmt"
	"math/big"

	"github.com/briankscheong/go-graphql-gateway/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	randNumber, _ := rand.Int(rand.Reader, big.NewInt(100))
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", randNumber),
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, input model.DeleteTodo) (*model.Todo, error) {
	var newTodos []*model.Todo
	var deleteTodo *model.Todo
	for i := 0; i < len(r.todos); i++ {
		if r.todos[i].ID == input.TodoID {
			deleteTodo = r.todos[i]
			continue
		}
		newTodos = append(newTodos, r.todos[i])
	}

	if deleteTodo == nil {
		return nil, fmt.Errorf("could not find todo with id %s", input.TodoID)
	}
	r.todos = newTodos
	return deleteTodo, nil
}

// CreatePod is the resolver for the createPod field.
func (r *mutationResolver) CreatePod(ctx context.Context, input model.CreatePodInput) (*model.Pod, error) {
	panic(fmt.Errorf("not implemented: CreatePod - createPod"))
}

// DeletePod is the resolver for the deletePod field.
func (r *mutationResolver) DeletePod(ctx context.Context, namespace string, name string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeletePod - deletePod"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Namespaces is the resolver for the namespaces field.
func (r *queryResolver) Namespaces(ctx context.Context) ([]*model.Namespace, error) {
	panic(fmt.Errorf("not implemented: Namespaces - namespaces"))
}

// Namespace is the resolver for the namespace field.
func (r *queryResolver) Namespace(ctx context.Context, name string) (*model.Namespace, error) {
	panic(fmt.Errorf("not implemented: Namespace - namespace"))
}

// Pod is the resolver for the pod field.
func (r *queryResolver) Pod(ctx context.Context, namespace string, name string) (*model.Pod, error) {
	panic(fmt.Errorf("not implemented: Pod - pod"))
}

// Pods is the resolver for the pods field.
func (r *queryResolver) Pods(ctx context.Context, namespace string, labelSelector *string) ([]*model.Pod, error) {
	panic(fmt.Errorf("not implemented: Pods - pods"))
}

// Deployments is the resolver for the deployments field.
func (r *queryResolver) Deployments(ctx context.Context, namespace string, labelSelector *string) ([]*model.Deployment, error) {
	panic(fmt.Errorf("not implemented: Deployments - deployments"))
}

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context, namespace string, labelSelector *string) ([]*model.Service, error) {
	panic(fmt.Errorf("not implemented: Services - services"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
